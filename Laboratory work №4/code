% task1.1 - чтение списка с клавиатуры
read_list(0,[]):-!.
read_list(N, [Head|Tail]):-read(Head), N1 is N -1, read_list(N1,Tail).

% task1.2 - вывод списка на экран
write_list([]):-!.
write_list([Head|Tail]):-write(Head),nl,write_list(Tail).

% + обязательно аргумент должен быть унифицирован
% - всегда не унифицирован
% ? как ун. так и неун.

% task2 - предикат (сумма эл-тов списка) и программа
% рекурсия ВНИЗ
sum_list_down(List, Sum):- sum_list_down(List, 0, Sum).
sum_list_down([], Sum, Sum):-!.
sum_list_down([Head|Tail], S, Sum):- S1 is S + Head, sum_list_down(Tail, S1, Sum).

pr4_2():-write("write N: "), read(N), read_list(N, List),
    sum_list_down(List,Sum), write(Sum).

% task3 - сумма эл-тов списка
% рекурсия ВВЕРХ
sum_list_up([], 0):-!.
sum_list_up([Head|Tail], Sum):- sum_list_up(Tail, Sum1), Sum is Sum1 + Head.

% task4 - номер эл-та \ эл-т по номеру \ или проверка эл-та&номера
list_el_numb(List, Elem, Number):-list_el_numb(List, Elem, 0, Number).
list_el_numb([H|_], H, Number, Number):- !.
list_el_numb([_|T], Elem, I, Number):- I1 is I + 1, list_el_numb(T, Elem, I1, Number).

% task4
pr4_4():-write("write N: "), read(N), read_list(N, List),write("write elem: "), read(Elem),
    list_el_numb(List, Elem, Number), write("number: "), write(Number), !.
pr4_4():- write("there is no element!").

% task5
pr4_5:-write("Write N: "), read(N), read_list(N,List), write("Write elem num: "),
    read(Number), list_el_numb(List, Elem, Number),
    write("elem: "), write(Elem), !.
pr4_5:-write("there is no such number!").

% task6 - min эл-т списка
min_list_up([H|[]], H):-!.
min_list_up([H|T], Min):- min_list_up(T, Min1),
    (H < Min1 -> Min is H; Min is Min1).

% task7 - min эл-т списка
% рекурсия ВНИЗ
min_list_down([H|T], Min):- min_list_down([H|T], H, Min).
min_list_down([], Min, Min):-!.
min_list_down([H|T], CurMin, Min):-
    (H < CurMin -> CurMin1 is H; CurMin1 is CurMin),
    min_list_down(T, CurMin1, Min).

% task8
pr4_8:- write("Write N: "), read(N), read_list(N,List),
    min_list_up(List, Min), write("Min: "), write(Min).

% task9 - true если эл-т есть в списке
in_list([El|_],El).
in_list([_|Tail],El):- in_list(Tail, El).

% ?- in_list([1,2,3],El), write(El),fail.
% ?- read_list(3,List), in_list(List,X), in_list(List,Y), Z is X * Y, write(Z), nl, fail .

%append(List1, List2, List).
append1([], List2, List2).
append1([H|T1], List2, [H|T2]):- append1(T1, List2, T2).

% task10 - переворачивает список
mirror([H|[]], [H|[]]):-!.
mirror([H|T], ListNew):- mirror(T, List), append1(List,[H], ListNew).

% task11 - если sublist в list в том же порядке - true
p([],[],0):-!.
p([],[],1):-!.
p([],[_|_],1):-!.
p([Hsub|Tsub], [H|T],Flag):- (Hsub = H ->
                             (Flag1 is 1, p(Tsub,T,Flag1));
                             (Flag=0 -> p([Hsub|Tsub],T,Flag);
                             ([H|T] \= [] -> p([Hsub|Tsub],T,0);fail))).
p(SubList,List):-p(SubList,List,0).
